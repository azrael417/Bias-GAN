#ifndef __NUMPY_READER_H__
#define __NUMPY_READER_H__

//standard includes
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <math.h>
#include <string>
#include <assert.h> 
#include <regex>

//torch extension
//#include <torch/extension.h>

class NumpyReader {
public:
	explicit NumpyReader(const std::string& filename) : 
		_filename(filename),
		_header_regex(R"###(^\{'descr': \'(.*?)\', 'fortran_order': (.*?), 'shape': \((.*?)\), \})###"),
		_fortran_order(false),
		_little_endian(true),
		_typeid('?'),
		_numelem(0),
		_typesize(0)
		 {
			 _fd = fopen(_filename.c_str(), "r");
			 if(_fd == NULL){
				 throw std::runtime_error("NumpyReader: failed to open file " + _filename);
			 }
		 }
	
	//read routine
	void Read();
	
	//print info convenience functions
	void PrintHeaderInfo();
	void PrintDataInfo();

private:
	//regex search
	const std::regex _header_regex;
	
	//other variables
	std::string _filename;
	FILE* _fd;
	bool _fortran_order;
	bool _little_endian;
	std::string _dtype;
	std::vector<size_t> _shape;
	char _typeid;
	size_t _numelem;
	size_t _typesize;
	
	//only called by Read routine
	void ParseHeader();
  
	//read payload
	void ReadPayload();
};


#endif  //__NUMPY_READER_H__
