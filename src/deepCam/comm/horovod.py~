import numpy as np
import torch
import torch.optim as optim
import horovod.torch as hvd

#torch helpers
class comm(object):
    
    def metric_average(self, val, name, op_name=None):
        op = None
        if op_name == "average":
            op = hvd.Average
        elif op_name == "sum":
            op = hvd.Sum
        
        tensor = torch.tensor(val)
        avg_tensor = hvd.allreduce(tensor, name=name, op=op)
        return avg_tensor.item()

    def printr(self, msg, rank=0):
        if hvd.rank() == rank:
            print(msg)

    def init(self):
        hvd.init()

    def size(self):
        return hvd.size()
    
    def rank(self):
        return hvd.rank()

    def local_rank(self):
        return hvd.local_rank()

    def broadcast(self, tensor, root_rank):
        hvd.broadcast(tensor, root_rank = root_rank)

    def broadcast_parameters(self, state_dict, root_rank):
        hvd.broadcast_parameters(state_dict, root_rank = root_rank)

    def broadcast_optimizer_state(self, optimizer, root_rank):
        hvd.broadcast_optimizer_state(optimizer, root_rank = root_rank)
